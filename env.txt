package com.skigit.application;

import android.app.Application;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Volley;
import com.android.volley.cache.DiskLruBasedCache;
import com.android.volley.cache.SimpleImageLoader;
import com.google.firebase.FirebaseApp;
import com.skigit.R;
import com.skigit.utils.Config;
import com.skigit.utils.ConnectivityReceiver;
import com.skigit.utils.Fonts;
import com.skigit.utils.Global;
import com.twitter.sdk.android.core.DefaultLogger;
import com.twitter.sdk.android.core.Twitter;
import com.twitter.sdk.android.core.TwitterAuthConfig;
import com.twitter.sdk.android.core.TwitterConfig;
import android.annotation.SuppressLint;
import javax.net.ssl.TrustManager;
import javax.net.ssl.SSLSession;
import 	javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.X509TrustManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.HostnameVerifier;
import java.security.cert.X509Certificate;
import java.security.SecureRandom;


public class AppController extends Application {

    private static AppController mInstance;
    private RequestQueue mRequestQueue;
    private static SimpleImageLoader mImageLoader;


    public static final String TAG = AppController.class
            .getSimpleName();

    @Override
    public void onCreate() {
        super.onCreate();
        handleSSLHandshake();
        mInstance = this;
        FirebaseApp.initializeApp(mInstance);

        Global.initializeFont(this);
        Global.overrideFont(getApplicationContext(), "MONOSPACE", Fonts.REGULAR);


        //Calculate height
        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();
        Config.DEVICE_WIDTH = displayMetrics.widthPixels;
        Config.DEVICE_HEIGHT = displayMetrics.heightPixels;
        Log.d(AppController.TAG, "Device width" + Config.DEVICE_WIDTH);

        TwitterConfig config = new TwitterConfig.Builder(this)
                .logger(new DefaultLogger(Log.DEBUG))//enable logging when app is in debug mode
                .twitterAuthConfig(new TwitterAuthConfig(getResources().getString(R.string.twitter_consumer_key), getResources().getString(R.string.twitter_consumer_secret)))//pass the created app Consumer KEY and Secret also called API Key and Secret
                .debug(true)//enable debug mode
                .build();

        //finally initialize twitter with created configs
        Twitter.initialize(config);


    }

    public static synchronized AppController getInstance() {
        return mInstance;
    }

    public RequestQueue getRequestQueue() {
        if (mRequestQueue == null) {
            mRequestQueue = Volley.newRequestQueue(getApplicationContext());
        }

        return mRequestQueue;
    }


    public <T> void addToRequestQueue(Request<T> req, String tag) {
        // set the default tag if tag is empty
        req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);
        getRequestQueue().add(req);
    }

    public <T> void addToRequestQueue(Request<T> req) {
        req.setTag(TAG);
        getRequestQueue().add(req);
    }

    public void cancelPendingRequests(Object tag) {
        if (mRequestQueue != null) {
            mRequestQueue.cancelAll(tag);
        }
    }

    public void setConnectivityListener(ConnectivityReceiver.ConnectivityReceiverListener listener) {
        ConnectivityReceiver.connectivityReceiverListener = listener;
    }


    public SimpleImageLoader getImageLoader() {
        DiskLruBasedCache.ImageCacheParams cacheParams = new DiskLruBasedCache.ImageCacheParams(this, "images");
        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory
        if (mImageLoader != null) {
            return mImageLoader;
        } else {
            mImageLoader = new SimpleImageLoader(this, cacheParams);
//            throw new IllegalStateException("ImageLoader not initialized");
            return mImageLoader;
        }
    }

    @SuppressLint("TrulyRandom")
    public static void handleSSLHandshake() {
        try {
            TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[0];
                }

                @Override
                public void checkClientTrusted(X509Certificate[] certs, String authType) {
                }

                @Override
                public void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }};

            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String arg0, SSLSession arg1) {
                    return true;
                }
            });
        } catch (Exception ignored) {
        }
    }

}